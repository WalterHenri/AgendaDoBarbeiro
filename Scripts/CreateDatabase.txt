
--CREATE DATABASE agendadobarbeiro;
--USING agendadobarbeiro;


CREATE TABLE users
(
    user_id      BIGSERIAL PRIMARY KEY,
    username varchar(50),
    email VARCHAR(50),
    first_name   VARCHAR(50)        NOT NULL,
    last_name    VARCHAR(50)        NOT NULL,
    passwordHash     VARCHAR(255)   NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE roles
(
    role_id     BIGSERIAL PRIMARY KEY,
    description VARCHAR(50) NOT NULL
);

CREATE TABLE users_roles
(
    user_id BIGINT REFERENCES users (user_id),
    role_id BIGINT REFERENCES roles (role_id),
    CONSTRAINT pk_user_role PRIMARY KEY (user_id, role_id)
);

CREATE TABLE schedule_status
(
    description VARCHAR(50) PRIMARY KEY
);

INSERT INTO schedule_status (description)
VALUES ('realized'),
       ('canceled'),
       ('scheduled'),
       ('confirmed'),
       ('missed');

CREATE TABLE schedules
(
    schedule_id     BIGSERIAL PRIMARY KEY,
    professional_id BIGINT,
    customer_id     BIGINT,
    created_date    TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    scheduled_date  TIMESTAMP WITHOUT TIME ZONE,
    FOREIGN KEY (professional_id) REFERENCES users (user_id),
    FOREIGN KEY (customer_id) REFERENCES users (user_id),
    schedule_status VARCHAR(50) CHECK (schedule_status IN ('realized', 'canceled', 'scheduled', 'confirmed', 'missed'))
);

CREATE TABLE barber_services
(
    barber_service_id BIGSERIAL PRIMARY KEY,
    description       VARCHAR(255)   NOT NULL,
    price             DECIMAL(10, 2) NOT NULL DEFAULT 0,
    estimated_time    INT            NOT NULL
);

CREATE TABLE scheduled_services
(
    scheduled_service_id BIGSERIAL PRIMARY KEY,
    barber_service_id    BIGINT REFERENCES barber_services (barber_service_id),
    schedule_id          BIGINT REFERENCES schedules (schedule_id),
    estimated_time       INT            NOT NULL,
    price                DECIMAL(10, 2) NOT NULL DEFAULT 0
);

CREATE TABLE professional_services
(
    professional_service_id BIGSERIAL PRIMARY KEY,
    barber_service_id       BIGINT REFERENCES barber_services (barber_service_id),
    professional_id         BIGINT REFERENCES users (user_id)
);

CREATE TABLE product
(
    product_id  SERIAL PRIMARY KEY,
    ean         VARCHAR(255),
    price       DECIMAL(10, 2) NOT NULL DEFAULT 0,
    description VARCHAR(255),
    external_id VARCHAR(255)
);

CREATE TABLE item
(
    item_id     BIGSERIAL PRIMARY KEY,
    product_id  INT
        CONSTRAINT fk_item_product REFERENCES product (product_id),
    quantity    INT NOT NULL,
    discount    DECIMAL(10, 2) NOT NULL DEFAULT 0,
    unit_price  DECIMAL(10, 2) NOT NULL DEFAULT 0,
    total_price DECIMAL(10, 2) NOT NULL DEFAULT 0
);


CREATE TABLE sale_status
(
    description VARCHAR(50) PRIMARY KEY
);

INSERT INTO sale_status (description)
VALUES ('open'),
       ('closed'),
       ('canceled')
;

CREATE TABLE sale
(
    sale_id     BIGSERIAL PRIMARY KEY,
    description  VARCHAR(255),
    total_price  DECIMAL(10, 2) NOT NULL DEFAULT 0,
    created_at   TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    finalized_at TIMESTAMP WITHOUT TIME ZONE,
    status       VARCHAR(50) check ( status in (('open'),
                                                ('closed'),
                                                ('canceled')) )
);

create table sale_scheduled_services(
    sale_id BIGINT references sale(sale_id),
    scheduled_service_id BIGINT references  scheduled_services(scheduled_service_id) ,
    constraint pk_sale_scheduled_service PRIMARY KEY (sale_id, scheduled_service_id)
);

create table sale_items(
    sale_id BIGINT references sale(sale_id),
    item_id BIGINT references  item(item_id) ,
    constraint pk_sale_item PRIMARY KEY (sale_id, item_id)
);

CREATE TABLE addresses (
    address_id BIGSERIAL,
    user_id BIGINT REFERENCES users(user_id),
    street VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100),
    CONSTRAINT pk_address_user PRIMARY KEY (address_id, user_id)
);

CREATE TABLE payment_methods (
    payment_method_id BIGSERIAL PRIMARY KEY,
    description VARCHAR(255) NOT NULL,
	sale_id BIGINT,
    CONSTRAINT fk_payment_method_sales FOREIGN KEY (sale_id) REFERENCES sale(sale_id)
);

CREATE TABLE inventory (
    inventory_id BIGSERIAL PRIMARY KEY,
    product_id INT,
    quantity_on_hand INT,
    reorder_level INT,
    CONSTRAINT fk_inventory_product FOREIGN KEY (product_id) REFERENCES product(product_id)
);

CREATE TABLE reviews (
    review_id BIGSERIAL,
    customer_id BIGINT REFERENCES users(user_id),
    scheduled_service_id BIGINT REFERENCES scheduled_services(scheduled_service_id),
    rating INT CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    CONSTRAINT pk_review_customer_service PRIMARY KEY (review_id, customer_id, scheduled_service_id)
);

CREATE TABLE notifications (
    notification_id BIGSERIAL PRIMARY KEY,
    recipient_id BIGINT REFERENCES users(user_id),
    message TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




